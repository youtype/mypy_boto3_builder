name: Publish types-boto3-full
concurrency: publish_types_boto3_full

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      boto3_version:
        description: Target boto3 version
        required: false
        default: ""
        type: string
      stubs_version:
        description: Specify version explicitly instead of finding it automatically
        required: false
        default: ""
        type: string
      force:
        description: Continue if version is already published
        required: false
        default: false
        type: boolean
      no_smart_version:
        description: Use exact version provided in stubs_version
        required: false
        default: false
        type: boolean

jobs:
  versions:
    runs-on: ubuntu-latest
    outputs:
      boto3: ${{ steps.boto3.outputs.result }}
      botocore: ${{ steps.botocore.outputs.result }}
      boto3-url: ${{ steps.boto3-url.outputs.result }}
      botocore-url: ${{ steps.botocore-url.outputs.result }}
      version: ${{ steps.version.outputs.result }}
      extra-flags: ${{ steps.extra-flags.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: Find boto3 version
        id: boto3
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { getBoto3Version, setupGlobals } = require('./.github/workflows/helpers.js')
            setupGlobals({ core, context, fetch })

            const inputVersion = context.payload.inputs && context.payload.inputs.boto3_version
            const version = inputVersion ? inputVersion : await getBoto3Version()
            core.notice(`boto3 version ${version}`)
            return version
      - name: Find botocore version
        id: botocore
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { getBotocoreVersion, setupGlobals } = require('./.github/workflows/helpers.js')
            setupGlobals({ core, context, fetch })

            const version = getBotocoreVersion("${{ steps.boto3.outputs.result }}")
            core.notice(`botocore version ${version}`)
            return version
      - name: Find build version
        id: version
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { getPackageVersions, getNextPostVersion, setupGlobals } = require('./.github/workflows/helpers.js')
            setupGlobals({ core, context, fetch })

            if (context.payload.inputs && context.payload.inputs.stubs_version) {
              const version = context.payload.inputs.stubs_version
              core.notice(`stubs version ${version}`)
              return version
            }

            const force = context.payload.inputs ? context.payload.inputs.force !== 'false' : false
            const boto3Version = "${{ steps.boto3.outputs.result }}"

            const versions = await getPackageVersions('types-boto3-full', boto3Version)
            core.info(`Built versions ${versions}`)

            if (!versions.length) {
              core.notice(`No builds found, building initial ${boto3Version}`)
              return boto3Version
            }

            if (!force) {
              core.notice(`Builds ${versions} found, skipping`)
              return ''
            }

            const lastVersion = versions.pop()
            core.notice(`Last version ${lastVersion}`)

            const version = getNextPostVersion(lastVersion)
            core.notice(`Version ${version}`)
            return version
      - name: Extra flags
        id: extra-flags
        if: steps.version.outputs.result
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const extraFlags = []

            const noSmartVersion = context.payload.inputs ? context.payload.inputs.no_smart_version !== 'false' : true
            if (noSmartVersion) extraFlags.push('--no-smart-version')

            core.notice(`Extra flags = ${extraFlags}`)
            return extraFlags.join(' ')
      - name: Boto3 download URL
        id: boto3-url
        if: steps.version.outputs.result
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { getDownloadURL, setupGlobals } = require('./.github/workflows/helpers.js')
            setupGlobals({ core, context, fetch })

            const url = await getDownloadURL('boto3', "${{ steps.boto3.outputs.result }}")
            core.notice(`boto3 download URL ${url}`)
            return url
      - name: Botocore download URL
        id: botocore-url
        if: steps.version.outputs.result
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { getDownloadURL, setupGlobals } = require('./.github/workflows/helpers.js')
            setupGlobals({ core, context, fetch })

            const url = await getDownloadURL('botocore', "${{ steps.botocore.outputs.result }}")
            core.notice(`botocore download URL ${url}`)
            return url

  publish-types-boto3:
    name: Publish types-boto3
    runs-on: ubuntu-latest
    needs: versions
    if: needs.versions.outputs.version
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Set up uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      - name: Install boto3
        run: |
          mkdir installtemp
          cd installtemp
          wget ${{ needs.versions.outputs.boto3-url }}
          wget ${{ needs.versions.outputs.botocore-url }}
          pip uninstall -y s3transfer
          pip install botocore*.whl
          pip install boto3*.whl
          cd ..
          rm -rf installtemp
      - name: Install builder
        run: |
          rm -rf mypy_boto3_builder
          python -m pip install mypy_boto3_builder
      - name: Build
        env:
          VERSION: ${{ needs.versions.outputs.version }}
          EXTRA_FLAGS: ${{ needs.versions.outputs.extra-flags }}
        run: |
          rm -rf mypy_boto3_output/*

          echo "Building"
          python -m mypy_boto3_builder mypy_boto3_output \
            -b ${VERSION} \
            --product types-boto3-full \
            ${EXTRA_FLAGS} \
            --download-static-stubs \
            -s all
      - name: Publish to PyPI
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          uv run ./scripts/release.py
