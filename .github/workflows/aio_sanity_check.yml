name: "Sanity: types-aiobotocore"

on:
  schedule:
    - cron: "0 0 1 * *"
  workflow_dispatch:
    inputs:
      boto3_version:
        description: Target boto3 version
        required: false

jobs:
  versions:
    runs-on: ubuntu-latest
    outputs:
      boto3: ${{ steps.boto3.outputs.result }}
      botocore: ${{ steps.botocore.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract boto3 version
        id: boto3
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { getBoto3Version, setupGlobals } = require('./.github/workflows/helpers.js')
            setupGlobals({ core, context, fetch })
            const inputBoto3Version = context.payload.inputs && context.payload.inputs.boto3_version
            const version = inputBoto3Version ? inputBoto3Version : await getBoto3Version()
            core.notice(`boto3 version ${version}`)
            return version
      - name: Extract botocore version
        id: botocore
        uses: actions/github-script@v7
        env:
          BOTO3_VERSION: ${{ steps.boto3.outputs.result }}
        with:
          result-encoding: string
          script: |
            const { getBotocoreVersion } = require('./.github/workflows/helpers.js')
            const version = getBotocoreVersion(process.env.BOTO3_VERSION)
            core.notice(`botocore version ${version}`)
            return version
  sanity-check:
    name: "Sanity: types-aiobotocore"
    runs-on: ubuntu-latest
    needs: versions
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      - name: Install the project
        run: uv sync --extra check --dev
      - name: Install boto3
        env:
          BOTO3_VERSION: ${{ needs.versions.outputs.boto3 }}
          BOTOCORE_VERSION: ${{ needs.versions.outputs.botocore }}
        run: |
          uv pip install boto3==${BOTO3_VERSION} botocore==${BOTOCORE_VERSION}
          uv pip install -U aioboto3
      - name: Build main packages
        run: |
          rm -rf mypy_boto3_output/*
          uv run mypy_boto3_builder mypy_boto3_output \
            --product aioboto3 aiobotocore \
            --no-smart-version
      - name: Install main packages
        run: |
          bash ./scripts/install_aiobotocore.sh main
      - name: Check s3 output
        run: |
          rm -rf mypy_boto3_output/*
          uv run mypy_boto3_builder mypy_boto3_output \
            --product aiobotocore-services \
            -s s3 \
            --no-smart-version
          uv run ./scripts/check_output.py -p ./mypy_boto3_output s3
      - name: Build packages
        run: |
          uv run mypy_boto3_builder mypy_boto3_output \
            --product aiobotocore-services \
            --no-smart-version
      - name: Check output
        run: |
          uv run ./scripts/check_output.py -p ./mypy_boto3_output
