{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Mypy Boto3 Builder","text":"<p>Type annotations generator for types-boto3, boto3-stubs, types-aiobotocore, and types-aioboto3 projects. Compatible with VSCode, PyCharm, Emacs, Sublime Text, mypy, pyright and other tools.</p> <p>See how it helps to find and fix potential bugs:</p> <p></p> <ul> <li>Mypy Boto3 Builder</li> <li>Quickstart</li> <li>Type annotations documentation</li> <li>Versioning</li> <li>Latest changes</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<ul> <li>Install uv</li> <li>Run <code>uvx mypy-boto3-builder</code></li> <li>Answer some questions, get your custom package</li> <li>Install a generated package</li> </ul>"},{"location":"#type-annotations-documentation","title":"Type annotations documentation","text":"<ul> <li>If you use <code>boto3</code> or <code>botocore</code>, follow types-boto3 documentation</li> <li>For <code>aiobotocore</code> follow types-aiobotocore documentation</li> <li>For <code>aioboto3</code> follow types-aioboto3 documentation</li> </ul>"},{"location":"#versioning","title":"Versioning","text":"<p><code>mypy_boto3_builder</code> version is not related to <code>boto3</code> version and follows PEP 440.</p>"},{"location":"#latest-changes","title":"Latest changes","text":"<p>Full changelog can be found in Releases.</p>"},{"location":"development/","title":"Development","text":"<ul> <li>Install uv: <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code></li> <li>Install dependencies: <code>uv sync --all-extras --dev</code></li> <li>Use scripts for repo to check if everything works: <code>./scripts/build.sh</code></li> <li>Run manual pre-commit: <code>./scripts/before_commit.sh</code></li> </ul>"},{"location":"how_it_works/","title":"How it works","text":"<p>Fully automated mypy-boto3-builder carefully generates type annotations for each service, patiently waiting for <code>boto3</code> updates. It delivers drop-in type annotations for you and makes sure that:</p> <ul> <li>All available <code>botocore</code> services are covered.</li> <li>Each public class and method of every <code>botocore</code> service gets valid type annotations   extracted from <code>botocore</code> schemas.</li> <li>Type annotations include up-to-date documentation.</li> <li>Link to documentation is provided for every method.</li> <li>Code is processed by ruff for readability.</li> </ul>"},{"location":"how_to_build/","title":"How to build type annotations","text":"<ul> <li>How to build type annotations</li> <li>With your personal assistant (recommended)</li> <li>With CLI</li> <li>With Docker image</li> </ul>"},{"location":"how_to_build/#with-your-personal-assistant-recommended","title":"With your personal assistant (recommended)","text":"<ul> <li>Install uv</li> </ul> <pre><code># run builder and chat with him :)\nuvx mypy_boto3_builder\n\n# set library version explicitly for better results\nuvx --with 'boto3==1.35.71' mypy-boto3-builder</code></pre>"},{"location":"how_to_build/#with-cli","title":"With CLI","text":"<pre><code># Install preferred version of `boto3`\npython -m pip install boto3==1.35.71 botocore==1.35.71\n\n# Install `mypy-boto3-builder`\npython -m pip install mypy-boto3-builder\n\n# Build all packages in typings directory\npython -m mypy_boto3_builder ./typings --product types-boto3 types-boto3-services --output-type wheel\n\n# Or specify required services explicitly\npython -m mypy_boto3_builder ./typings --product types-boto3 types-boto3-services --output-type wheel -s ec2 s3\n\n# Install custom `types-boto3` packages\npython -m pip install ./typings/*.whl</code></pre>"},{"location":"how_to_build/#with-docker-image","title":"With Docker image","text":"<ul> <li>Install Docker</li> <li>Pull latest <code>mypy_boto3_builder</code> version and tag it</li> </ul> <pre><code>docker pull docker.pkg.github.com/youtype/mypy_boto3_builder/mypy_boto3_builder_stable:latest\ndocker tag docker.pkg.github.com/youtype/mypy_boto3_builder/mypy_boto3_builder_stable:latest mypy_boto3_builder</code></pre> <ul> <li>Generate stubs in <code>output</code> directory</li> </ul> <pre><code>mkdir output\n\n# generate stubs for all services\ndocker run -v `pwd`/output:/output -ti mypy_boto3_builder_stable\n\n# generate stubs for s3 service\ndocker run -v `pwd`/output:/output -ti mypy_boto3_builder_stable -s s3\n\n# generate stubs for a specific boto3 version\ndocker run -e BOTO3_VERSION=1.35.71 BOTOCORE_VERSION=1.35.71 -v `pwd`/output:/output -ti mypy_boto3_builder_stable</code></pre> <ul> <li>Install packages from <code>output</code> directory as described above</li> </ul>"},{"location":"pre_build/","title":"How to use pre-built libraries","text":"<ul> <li>How to use pre-built libraries</li> <li>boto3 and botocore</li> <li>aiobotocore</li> <li>aioboto3</li> </ul>"},{"location":"pre_build/#boto3-and-botocore","title":"boto3 and botocore","text":"<p>Check types-boto3 project for installation and usage instructions.</p> <p>If you use VSCode, add AWS Boto3 extension to your VSCode and run <code>AWS boto3: Quick Start</code> command.</p> <p>If not, just install <code>types-boto3</code> with <code>pip</code>:</p> <pre><code>python -m pip install 'types-boto3[essential]'\n\n# Lite version does not provide session.client/resource overloads\n# it is more RAM-friendly, but requires explicit type annotations\npython -m pip install 'types-boto3-lite[essential]'\n\n# do not forget to install mypy or pyright</code></pre> <p>That's it! You should already have code completion and type checking in your IDE.</p> <p>Check types-boto3 documentation for more details.</p>"},{"location":"pre_build/#aiobotocore","title":"aiobotocore","text":"<p>Check types-aiobotocore project for installation and usage instructions.</p> <p>Or just install <code>types-aiobotocore</code> with <code>pip</code>:</p> <pre><code>python -m pip install 'types-aiobotocore[essential]'\n\n# Lite version does not provide session.create_client overloads\n# it is more RAM-friendly, but requires explicit type annotations\npython -m pip install 'types-aiobotocore-lite[essential]'\n\n# do not forget to install mypy or pyright</code></pre> <p>Ready to go! Enjoy code completion and type checking in your <code>aiobotocore</code> project.</p> <p>Check types-aiobotocore documentation for more details.</p>"},{"location":"pre_build/#aioboto3","title":"aioboto3","text":"<p>Check types-aioboto3 project for installation and usage instructions.</p> <p>Or just install <code>types-aioboto3</code> with <code>pip</code>:</p> <pre><code>python -m pip install 'types-aioboto3[essential]'\n\n# Lite version does not provide session.client/resource overloads\n# it is more RAM-friendly, but requires explicit type annotations\npython -m pip install 'types-aioboto3-lite[essential]'\n\n# do not forget to install mypy or pyright</code></pre> <p>Whoa! All <code>aioboto3</code> methods and attributes are now type annotated and even code completion works.</p> <p>Check types-aioboto3 documentation for more details.</p>"},{"location":"thank_you/","title":"Thank you","text":""},{"location":"thank_you/#toolset","title":"Toolset","text":"<ul> <li>black developers for an awesome formatting tool</li> <li>Timothy Edmund Crosley for   isort and how flexible it is</li> <li>mypy developers for doing all dirty work for us</li> <li>pyright team for the new era of typed Python</li> <li>ruff developers for the fastest swiss knife for Python</li> </ul>"},{"location":"thank_you/#contributors","title":"Contributors","text":"<ul> <li>Allie Fitter, author of original   boto3-type-annotations</li> <li>jbpratt</li> <li>Chris Hollinworth</li> <li>Yoan Blanc</li> <li>Kostya Leschenko</li> <li>pyto86</li> <li>Ashton Honnecke</li> <li>Mike Carey</li> <li>Ole-Martin Bratteng</li> <li>Nikhil Benesch</li> <li>Maksym Balatsko</li> <li>Jacob</li> <li>Jakob Keller</li> <li>Ari Pollak</li> </ul>"}]}