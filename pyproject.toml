[project]
name = "mypy-boto3-builder"
version = "8.6.3"
requires-python = ">=3.12"
description = "Type annotations generator for types-boto3, boto3-stubs, types-aiobotocore, and types-aioboto3."
authors = [{ name = "Vlad Emelianov", email = "vlad.emelianov.nz@gmail.com" }]
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["boto3", "type-annotations", "pyright", "mypy", "boto3-stubs"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "jinja2",
    "mdformat",
    "packaging",
    "boto3",
    "botocore",
    "requests",
    "ruff",
    "setuptools",
    "colorama",
    "prompt-toolkit",
    "questionary>=2.0.1",
]

[project.optional-dependencies]
build = ["setuptools"]
check = ["boto3-stubs", "types-aiobotocore", "types-aioboto3"]

[tool.uv]
dev-dependencies = [
    "aiohttp",
    "boto3",
    "botocore-stubs",
    "cryptography",
    "istub",
    "mypy",
    "pyright",
    "pytest-cov",
    "pytest-mock",
    "pytest",
    "requests-mock",
    "twine",
    "types-boto3",
    "types-certifi",
    "types-python-dateutil",
    "types-requests",
    "types-s3transfer",
    "types-setuptools",
    "types-six",
    "types-urllib3",
    "typing_extensions",
    "wheel",
]
package = true

[project.scripts]
mypy_boto3_builder = 'mypy_boto3_builder.main:main'

[project.urls]
Homepage = "https://github.com/youtype/mypy_boto3_builder"
Documentation = "https://youtype.github.io/mypy_boto3_builder/"
Repository = "https://github.com/youtype/mypy_boto3_builder"
Changelog = "https://github.com/youtype/mypy_boto3_builder/releases"
Issues = "https://github.com/youtype/mypy_boto3_builder/issues"

[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[tool.setuptools.packages.find]
where = ["."]
include = ["mypy_boto3_builder", "mypy_boto3_builder.*"]

[tool.coverage.report]
exclude_lines = [
    "if self.debug:",
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@overload",
]
ignore_errors = true
omit = ["tests/*"]

[tool.pyright]
include = ["mypy_boto3_builder", "scripts"]
exclude = ["tests"]
ignore = [
    ".venv",
    "**/__pycache__",
    "**/build",
    "typestubs",
    "examples",
    "aio_examples",
    "mypy_boto3_builder/stubs_static",
    "**/test_*.py",
]
typeCheckingMode = "strict"
reportMissingImports = "error"
reportMissingTypeStubs = "error"
reportMissingTypeArgument = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportUnknownParameterType = "error"
pythonVersion = "3.12"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_ignores = false
disallow_untyped_defs = true
ignore_missing_imports = true
ignore_errors = false
exclude = ["^mypy_boto3_builder/stubs_static/.*"]

[[tool.mypy.overrides]]
module = "mypy-tests.*"
ignore_errors = true

[tool.ruff]
exclude = [
    ".eggs",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "build",
    "dist",
]

line-length = 100
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "ARG002",  # unused-argument
    "COM812",  # missing-trailing-comma
    "D107",    # undocumented-public-init
    "D200",    # fits-on-one-line
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "D406",    # new-line-after-section-name
    "D407",    # dashed-underline-after-section
    "D413",    # blank-line-after-last-section
    "D417",    # undocumented-param
    "DOC",     # pydoclint
    "EM",      # flake8-errmsg
    "ERA001",  # commented-out-code
    "FIX001",  # line-contains-fixme
    "G004",    # logging-f-string
    "INP001",  # implicit-namespace-package
    "ISC001",  # implicit-str-concat
    "PERF203", # try-except-in-loop
    "PLR0904", # too-many-public-methods
    "PLR0913", # too-many-arguments
    "PLR6301", # no-self-use
    "S404",    # suspicious-subprocess-import
    "S603",    # subprocess-without-shell-equals-true
    "TD",      # flake8-todos
    "TRY003",  # raise-vanilla-args
]
fixable = ["ALL"]
unfixable = ["B"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
exclude = ["*.pyi", "examples/*", "aio_examples/*"]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "D",       # missing-docstring
    "S101",    # use-of-assert
    "N803",    # argument-name-does-not-match
    "PLR2004", # constant-comparison
    "CPY001",  # missing-copyright
    "SLF001",  # private-member-access
]
"conftest.py" = [
    "D",       # missing-docstring
    "S101",    # use-of-assert
    "N803",    # argument-name-does-not-match
    "PLR2004", # constant-comparison
    "CPY001",  # missing-copyright
    "SLF001",  # private-member-access
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-copyright]
# author = "Vlad Emelianov"
min-file-size = 200
notice-rgx = "(?i)Copyright 2024"

[tool.vulture]
make_whitelist = true
min_confidence = 60
paths = ["mypy_boto3_builder", "vulture_whitelist.txt"]
